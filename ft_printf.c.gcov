        -:    0:Source:src/ft_printf.c
        -:    1:/* ************************************************************************** */
        -:    2:/*                                                                            */
        -:    3:/*                                                        :::      ::::::::   */
        -:    4:/*   ft_printf.c                                        :+:      :+:    :+:   */
        -:    5:/*                                                    +:+ +:+         +:+     */
        -:    6:/*   By: ai <ai@student.42>                          +#+  +:+       +#+        */
        -:    7:/*                                                +#+#+#+#+#+   +#+           */
        -:    8:/*   Created: 2025/09/10 00:00:00 by ai                #+#    #+#             */
        -:    9:/*   Updated: 2025/09/10 00:00:00 by ai               ###   ########.fr       */
        -:   10:/*                                                                            */
        -:   11:/* ************************************************************************** */
        -:   12:
        -:   13:#include "ft_printf.h"
        -:   14:
        -:   15:static int	ft_vprintf_core(const char *format, va_list *ap);
        -:   16:static int	ft_handle_conversion(char spec, va_list *ap);
        -:   17:
function ft_vprintf_core called 11 returned 100% blocks executed 100%
       11:   18:static int	ft_vprintf_core(const char *format, va_list *ap)
        -:   19:{
        -:   20:	int			i;
        -:   21:	int			count;
        -:   22:
       11:   23:	i = 0;
       11:   24:	count = 0;
        -:   25:
       48:   26:	while (format[i] != '\0')
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -:   27:	{
       38:   28:		if (format[i] == '%')
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
        -:   29:		{
       15:   30:			i++;
       15:   31:			if (format[i] == '\0')
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:   32:				break ;
       14:   33:			count += ft_handle_conversion(format[i], ap);
call    0 returned 100%
       14:   34:			i++;
        -:   35:		}
        -:   36:		else
        -:   37:		{
       23:   38:			write(1, &format[i], 1);
call    0 returned 100%
       23:   39:			count++;
       23:   40:			i++;
        -:   41:		}
        -:   42:	}
       11:   43:	return (count);
        -:   44:}
        -:   45:
function ft_printf called 12 returned 100% blocks executed 100%
       12:   46:int	ft_printf(const char *format, ...)
        -:   47:{
        -:   48:	va_list		ap;
        -:   49:	int			written;
        -:   50:
       12:   51:	if (format == NULL)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1:   52:		return (-1);
       11:   53:	va_start(ap, format);
       11:   54:	written = ft_vprintf_core(format, &ap);
call    0 returned 100%
       11:   55:	va_end(ap);
       11:   56:	return (written);
        -:   57:}
        -:   58:
function ft_handle_conversion called 14 returned 100% blocks executed 100%
       14:   59:static int	ft_handle_conversion(char spec, va_list *ap)
        -:   60:{
       14:   61:	if (spec == 'c')
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:   62:		return (ft_print_char((char)va_arg(*ap, int)));
call    0 returned 100%
call    1 returned 100%
       13:   63:	if (spec == 's')
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        2:   64:		return (ft_print_string(va_arg(*ap, const char *)));
call    0 returned 100%
call    1 returned 100%
       11:   65:	if (spec == 'p')
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        2:   66:		return (ft_print_pointer(va_arg(*ap, void *)));
call    0 returned 100%
call    1 returned 100%
        9:   67:	if (spec == 'd' || spec == 'i')
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        4:   68:		return (ft_print_signed(va_arg(*ap, int)));
call    0 returned 100%
call    1 returned 100%
        5:   69:	if (spec == 'u')
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:   70:		return (ft_print_unsigned(va_arg(*ap, unsigned int)));
call    0 returned 100%
call    1 returned 100%
        4:   71:	if (spec == 'x')
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   72:		return (ft_print_hex(va_arg(*ap, unsigned int), 0));
call    0 returned 100%
call    1 returned 100%
        3:   73:	if (spec == 'X')
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   74:		return (ft_print_hex(va_arg(*ap, unsigned int), 1));
call    0 returned 100%
call    1 returned 100%
        2:   75:	if (spec == '%')
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   76:		return (ft_print_percent());
call    0 returned 100%
        1:   77:	return (0);
        -:   78:}
        -:   79:
